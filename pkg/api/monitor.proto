syntax = "proto3";

package api;

service Settings {
    rpc GetClientSettings (ClientSettingsRequest) returns (ClientSettingsResponse) {}
    rpc GetServerSettings (ServerSettingsRequest) returns (ServerSettingsResponse) {}
}

service Nodes {
    rpc GetBlockStores (GetBlockStoresRequest) returns (GetBlockStoresResponse) {}
    rpc GetIndexStores (GetIndexStoresRequest) returns (GetIndexStoresResponse) {}
    // TODO: watch, join, leave
}

service Volumes {
    rpc Get (GetVolumesRequest) returns (GetVolumesResponse) {}
    rpc Create (CreateVolumeRequest) returns (CreateVolumeResponse) {}
    rpc Delete (DeleteVolumeRequest) returns (DeleteVolumeResponse) {}
    rpc Watch (stream WatchVolumesRequest) returns (stream WatchVolumesResponse) {}
    // TODO: resize

    rpc UpdateShards (UpdateShardsRequest) returns (UpdateShardsResponse) {}
}

//
// Settings
//

message ClientSettingsRequest {

}

message ClientSettingsResponse {
    MonitorResponseHeader header = 1;
    ClientSettings settings = 2;
}

enum HashAlgorithm {
    SHA256 = 0;
    MURMURHASH3 = 1;
    RIPEMD160 = 2;
}

message ClientSettings {
    int32 min_fill_size = 1;
    HashAlgorithm hash_algo = 2;

    oneof chunk_algo {
        RabinChunkAlgorithm rabin = 3;
        FixedChunkAlgorithm fixed = 4;
        FastCDCChunkAlgorithm fastcdc = 5;
    }
    
}

message RabinChunkAlgorithm {
    uint64 poly = 1;
    int32 max_size = 2;
    int32 min_size = 3;
}

message FixedChunkAlgorithm {
    int32 max_size = 1;
}

message FastCDCChunkAlgorithm {
    int32 max_size = 1;
    int32 min_size = 2;
    int32 avg_size = 3;
}

message ServerSettingsRequest {

}

message ServerSettingsResponse {
    MonitorResponseHeader header = 1;
    ServerSettings settings = 2;
}

message ServerSettings {
    int64 shard_size = 1;
    int32 shard_entries_per_slice = 2;
}

//
// Nodes
//

message GetBlockStoresRequest {

}

message GetBlockStoresResponse {
    MonitorResponseHeader header = 1;
    NodeReplicaSets data = 2;
}

message GetIndexStoresRequest {

}

message GetIndexStoresResponse {
    MonitorResponseHeader header = 1;
    NodeReplicaSets data = 2;
}

message NodeReplicaSets {
    repeated NodeReplicaSet sets = 1;
}

message NodeReplicaSet {
    int64 slot = 1;
    repeated Node nodes = 2;
}

message Node {
    string address = 1;
    string name = 2;
    bool primary = 3;
}

//
// Volumes
//

message GetVolumesRequest {

}

message GetVolumesResponse {
    MonitorResponseHeader header = 1;
    repeated Volume volumes = 2;
}

message CreateVolumeRequest {
    string name = 1;
    int64 shards = 2;
}

message CreateVolumeResponse {
    MonitorResponseHeader header = 1;
}

message DeleteVolumeRequest {
    string name = 1;
}

message DeleteVolumeResponse {
    MonitorResponseHeader header = 1;
}

message WatchVolumesRequest {
    WatchRequestHeader header = 1;
}

message WatchVolumesResponse {
    WatchResponseHeader header = 1;
    repeated Volume volumes = 2;
}

message UpdateShardsRequest {
    string volume_name = 1;
    repeated int64 added_shards = 2;
    repeated int64 removed_shards = 3;
}

message UpdateShardsResponse {
    MonitorResponseHeader header = 1;
}

enum VolumeState {
    NEW = 0;
    CREATED = 1;
    RESIZING = 2;
    DELETING = 3;
    DELETED = 4;
}

message Volume {
    string name = 1;
    VolumeState state = 2;
    int64 shards = 3;
    int64 requested_shards = 4;
    repeated int64 current_shards = 5;
}

//
// Common
//

message MonitorResponseHeader {
    int64 revision = 1;
    int32 error = 2;
    string error_msg = 3;
}

message WatchRequestHeader {
    int64 start_revision = 1;
    bool end = 2;
}

message WatchResponseHeader {
    bool created = 1;
    bool canceled = 2;
    bool error = 3;
    string error_msg = 4;
}