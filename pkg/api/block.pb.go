// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockGetRequest struct {
	Hashes               [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockGetRequest) Reset()         { *m = BlockGetRequest{} }
func (m *BlockGetRequest) String() string { return proto.CompactTextString(m) }
func (*BlockGetRequest) ProtoMessage()    {}
func (*BlockGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{0}
}
func (m *BlockGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockGetRequest.Merge(dst, src)
}
func (m *BlockGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockGetRequest proto.InternalMessageInfo

func (m *BlockGetRequest) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type BlockGetResponse struct {
	// Types that are valid to be assigned to Msg:
	//	*BlockGetResponse_Info_
	//	*BlockGetResponse_Data_
	Msg                  isBlockGetResponse_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BlockGetResponse) Reset()         { *m = BlockGetResponse{} }
func (m *BlockGetResponse) String() string { return proto.CompactTextString(m) }
func (*BlockGetResponse) ProtoMessage()    {}
func (*BlockGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{1}
}
func (m *BlockGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockGetResponse.Merge(dst, src)
}
func (m *BlockGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockGetResponse proto.InternalMessageInfo

type isBlockGetResponse_Msg interface {
	isBlockGetResponse_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlockGetResponse_Info_ struct {
	Info *BlockGetResponse_Info `protobuf:"bytes,1,opt,name=info,oneof"`
}
type BlockGetResponse_Data_ struct {
	Data *BlockGetResponse_Data `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*BlockGetResponse_Info_) isBlockGetResponse_Msg() {}
func (*BlockGetResponse_Data_) isBlockGetResponse_Msg() {}

func (m *BlockGetResponse) GetMsg() isBlockGetResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *BlockGetResponse) GetInfo() *BlockGetResponse_Info {
	if x, ok := m.GetMsg().(*BlockGetResponse_Info_); ok {
		return x.Info
	}
	return nil
}

func (m *BlockGetResponse) GetData() *BlockGetResponse_Data {
	if x, ok := m.GetMsg().(*BlockGetResponse_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BlockGetResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BlockGetResponse_OneofMarshaler, _BlockGetResponse_OneofUnmarshaler, _BlockGetResponse_OneofSizer, []interface{}{
		(*BlockGetResponse_Info_)(nil),
		(*BlockGetResponse_Data_)(nil),
	}
}

func _BlockGetResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BlockGetResponse)
	// msg
	switch x := m.Msg.(type) {
	case *BlockGetResponse_Info_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Info); err != nil {
			return err
		}
	case *BlockGetResponse_Data_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BlockGetResponse.Msg has unexpected type %T", x)
	}
	return nil
}

func _BlockGetResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BlockGetResponse)
	switch tag {
	case 1: // msg.info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockGetResponse_Info)
		err := b.DecodeMessage(msg)
		m.Msg = &BlockGetResponse_Info_{msg}
		return true, err
	case 2: // msg.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockGetResponse_Data)
		err := b.DecodeMessage(msg)
		m.Msg = &BlockGetResponse_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BlockGetResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BlockGetResponse)
	// msg
	switch x := m.Msg.(type) {
	case *BlockGetResponse_Info_:
		s := proto.Size(x.Info)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlockGetResponse_Data_:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BlockGetResponse_Info struct {
	Header               *BlockResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BlockGetResponse_Info) Reset()         { *m = BlockGetResponse_Info{} }
func (m *BlockGetResponse_Info) String() string { return proto.CompactTextString(m) }
func (*BlockGetResponse_Info) ProtoMessage()    {}
func (*BlockGetResponse_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{1, 0}
}
func (m *BlockGetResponse_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockGetResponse_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockGetResponse_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockGetResponse_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockGetResponse_Info.Merge(dst, src)
}
func (m *BlockGetResponse_Info) XXX_Size() int {
	return m.Size()
}
func (m *BlockGetResponse_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockGetResponse_Info.DiscardUnknown(m)
}

var xxx_messageInfo_BlockGetResponse_Info proto.InternalMessageInfo

func (m *BlockGetResponse_Info) GetHeader() *BlockResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type BlockGetResponse_Data struct {
	Blocks               [][]byte `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockGetResponse_Data) Reset()         { *m = BlockGetResponse_Data{} }
func (m *BlockGetResponse_Data) String() string { return proto.CompactTextString(m) }
func (*BlockGetResponse_Data) ProtoMessage()    {}
func (*BlockGetResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{1, 1}
}
func (m *BlockGetResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockGetResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockGetResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockGetResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockGetResponse_Data.Merge(dst, src)
}
func (m *BlockGetResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *BlockGetResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockGetResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_BlockGetResponse_Data proto.InternalMessageInfo

func (m *BlockGetResponse_Data) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockDeleteRequest struct {
	Hashes               [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockDeleteRequest) Reset()         { *m = BlockDeleteRequest{} }
func (m *BlockDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*BlockDeleteRequest) ProtoMessage()    {}
func (*BlockDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{2}
}
func (m *BlockDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDeleteRequest.Merge(dst, src)
}
func (m *BlockDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDeleteRequest proto.InternalMessageInfo

func (m *BlockDeleteRequest) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type BlockDeleteResponse struct {
	Header               *BlockResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BlockDeleteResponse) Reset()         { *m = BlockDeleteResponse{} }
func (m *BlockDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*BlockDeleteResponse) ProtoMessage()    {}
func (*BlockDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{3}
}
func (m *BlockDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDeleteResponse.Merge(dst, src)
}
func (m *BlockDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDeleteResponse proto.InternalMessageInfo

func (m *BlockDeleteResponse) GetHeader() *BlockResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type BlockReserveRequest struct {
	Hashes               [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockReserveRequest) Reset()         { *m = BlockReserveRequest{} }
func (m *BlockReserveRequest) String() string { return proto.CompactTextString(m) }
func (*BlockReserveRequest) ProtoMessage()    {}
func (*BlockReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{4}
}
func (m *BlockReserveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockReserveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReserveRequest.Merge(dst, src)
}
func (m *BlockReserveRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReserveRequest proto.InternalMessageInfo

func (m *BlockReserveRequest) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type BlockReserveResponse struct {
	Header               *BlockResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ReservationId        string               `protobuf:"bytes,2,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	MissingBlocks        []int32              `protobuf:"varint,3,rep,packed,name=missing_blocks,json=missingBlocks" json:"missing_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BlockReserveResponse) Reset()         { *m = BlockReserveResponse{} }
func (m *BlockReserveResponse) String() string { return proto.CompactTextString(m) }
func (*BlockReserveResponse) ProtoMessage()    {}
func (*BlockReserveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{5}
}
func (m *BlockReserveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockReserveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockReserveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockReserveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReserveResponse.Merge(dst, src)
}
func (m *BlockReserveResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockReserveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReserveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReserveResponse proto.InternalMessageInfo

func (m *BlockReserveResponse) GetHeader() *BlockResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockReserveResponse) GetReservationId() string {
	if m != nil {
		return m.ReservationId
	}
	return ""
}

func (m *BlockReserveResponse) GetMissingBlocks() []int32 {
	if m != nil {
		return m.MissingBlocks
	}
	return nil
}

type BlockPutRequest struct {
	// Types that are valid to be assigned to Msg:
	//	*BlockPutRequest_Info_
	//	*BlockPutRequest_Data_
	Msg                  isBlockPutRequest_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BlockPutRequest) Reset()         { *m = BlockPutRequest{} }
func (m *BlockPutRequest) String() string { return proto.CompactTextString(m) }
func (*BlockPutRequest) ProtoMessage()    {}
func (*BlockPutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{6}
}
func (m *BlockPutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockPutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPutRequest.Merge(dst, src)
}
func (m *BlockPutRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockPutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPutRequest proto.InternalMessageInfo

type isBlockPutRequest_Msg interface {
	isBlockPutRequest_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlockPutRequest_Info_ struct {
	Info *BlockPutRequest_Info `protobuf:"bytes,1,opt,name=info,oneof"`
}
type BlockPutRequest_Data_ struct {
	Data *BlockPutRequest_Data `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*BlockPutRequest_Info_) isBlockPutRequest_Msg() {}
func (*BlockPutRequest_Data_) isBlockPutRequest_Msg() {}

func (m *BlockPutRequest) GetMsg() isBlockPutRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *BlockPutRequest) GetInfo() *BlockPutRequest_Info {
	if x, ok := m.GetMsg().(*BlockPutRequest_Info_); ok {
		return x.Info
	}
	return nil
}

func (m *BlockPutRequest) GetData() *BlockPutRequest_Data {
	if x, ok := m.GetMsg().(*BlockPutRequest_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BlockPutRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BlockPutRequest_OneofMarshaler, _BlockPutRequest_OneofUnmarshaler, _BlockPutRequest_OneofSizer, []interface{}{
		(*BlockPutRequest_Info_)(nil),
		(*BlockPutRequest_Data_)(nil),
	}
}

func _BlockPutRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BlockPutRequest)
	// msg
	switch x := m.Msg.(type) {
	case *BlockPutRequest_Info_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Info); err != nil {
			return err
		}
	case *BlockPutRequest_Data_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BlockPutRequest.Msg has unexpected type %T", x)
	}
	return nil
}

func _BlockPutRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BlockPutRequest)
	switch tag {
	case 1: // msg.info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockPutRequest_Info)
		err := b.DecodeMessage(msg)
		m.Msg = &BlockPutRequest_Info_{msg}
		return true, err
	case 2: // msg.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockPutRequest_Data)
		err := b.DecodeMessage(msg)
		m.Msg = &BlockPutRequest_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BlockPutRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BlockPutRequest)
	// msg
	switch x := m.Msg.(type) {
	case *BlockPutRequest_Info_:
		s := proto.Size(x.Info)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlockPutRequest_Data_:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BlockPutRequest_Info struct {
	ReservationId        string   `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockPutRequest_Info) Reset()         { *m = BlockPutRequest_Info{} }
func (m *BlockPutRequest_Info) String() string { return proto.CompactTextString(m) }
func (*BlockPutRequest_Info) ProtoMessage()    {}
func (*BlockPutRequest_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{6, 0}
}
func (m *BlockPutRequest_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPutRequest_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPutRequest_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockPutRequest_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPutRequest_Info.Merge(dst, src)
}
func (m *BlockPutRequest_Info) XXX_Size() int {
	return m.Size()
}
func (m *BlockPutRequest_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPutRequest_Info.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPutRequest_Info proto.InternalMessageInfo

func (m *BlockPutRequest_Info) GetReservationId() string {
	if m != nil {
		return m.ReservationId
	}
	return ""
}

type BlockPutRequest_Data struct {
	Blocks               [][]byte `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockPutRequest_Data) Reset()         { *m = BlockPutRequest_Data{} }
func (m *BlockPutRequest_Data) String() string { return proto.CompactTextString(m) }
func (*BlockPutRequest_Data) ProtoMessage()    {}
func (*BlockPutRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{6, 1}
}
func (m *BlockPutRequest_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPutRequest_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPutRequest_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockPutRequest_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPutRequest_Data.Merge(dst, src)
}
func (m *BlockPutRequest_Data) XXX_Size() int {
	return m.Size()
}
func (m *BlockPutRequest_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPutRequest_Data.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPutRequest_Data proto.InternalMessageInfo

func (m *BlockPutRequest_Data) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockPutResponse struct {
	Header               *BlockResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BlockPutResponse) Reset()         { *m = BlockPutResponse{} }
func (m *BlockPutResponse) String() string { return proto.CompactTextString(m) }
func (*BlockPutResponse) ProtoMessage()    {}
func (*BlockPutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{7}
}
func (m *BlockPutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockPutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPutResponse.Merge(dst, src)
}
func (m *BlockPutResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockPutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPutResponse proto.InternalMessageInfo

func (m *BlockPutResponse) GetHeader() *BlockResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type BlockMetadata struct {
	References           int32    `protobuf:"varint,1,opt,name=references,proto3" json:"references,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockMetadata) Reset()         { *m = BlockMetadata{} }
func (m *BlockMetadata) String() string { return proto.CompactTextString(m) }
func (*BlockMetadata) ProtoMessage()    {}
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{8}
}
func (m *BlockMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMetadata.Merge(dst, src)
}
func (m *BlockMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BlockMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMetadata proto.InternalMessageInfo

func (m *BlockMetadata) GetReferences() int32 {
	if m != nil {
		return m.References
	}
	return 0
}

type BlockReservations struct {
	Reservations         map[string]*BlockReservation `protobuf:"bytes,1,rep,name=reservations" json:"reservations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *BlockReservations) Reset()         { *m = BlockReservations{} }
func (m *BlockReservations) String() string { return proto.CompactTextString(m) }
func (*BlockReservations) ProtoMessage()    {}
func (*BlockReservations) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{9}
}
func (m *BlockReservations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockReservations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockReservations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockReservations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReservations.Merge(dst, src)
}
func (m *BlockReservations) XXX_Size() int {
	return m.Size()
}
func (m *BlockReservations) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReservations.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReservations proto.InternalMessageInfo

func (m *BlockReservations) GetReservations() map[string]*BlockReservation {
	if m != nil {
		return m.Reservations
	}
	return nil
}

type BlockReservation struct {
	Hashes               [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	MissingBlocks        []int32  `protobuf:"varint,2,rep,packed,name=missing_blocks,json=missingBlocks" json:"missing_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockReservation) Reset()         { *m = BlockReservation{} }
func (m *BlockReservation) String() string { return proto.CompactTextString(m) }
func (*BlockReservation) ProtoMessage()    {}
func (*BlockReservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{10}
}
func (m *BlockReservation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockReservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockReservation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockReservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReservation.Merge(dst, src)
}
func (m *BlockReservation) XXX_Size() int {
	return m.Size()
}
func (m *BlockReservation) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReservation.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReservation proto.InternalMessageInfo

func (m *BlockReservation) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *BlockReservation) GetMissingBlocks() []int32 {
	if m != nil {
		return m.MissingBlocks
	}
	return nil
}

type BlockResponseHeader struct {
	Error                int32    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResponseHeader) Reset()         { *m = BlockResponseHeader{} }
func (m *BlockResponseHeader) String() string { return proto.CompactTextString(m) }
func (*BlockResponseHeader) ProtoMessage()    {}
func (*BlockResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_92db6484d023d9e7, []int{11}
}
func (m *BlockResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseHeader.Merge(dst, src)
}
func (m *BlockResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseHeader proto.InternalMessageInfo

func (m *BlockResponseHeader) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *BlockResponseHeader) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*BlockGetRequest)(nil), "api.BlockGetRequest")
	proto.RegisterType((*BlockGetResponse)(nil), "api.BlockGetResponse")
	proto.RegisterType((*BlockGetResponse_Info)(nil), "api.BlockGetResponse.Info")
	proto.RegisterType((*BlockGetResponse_Data)(nil), "api.BlockGetResponse.Data")
	proto.RegisterType((*BlockDeleteRequest)(nil), "api.BlockDeleteRequest")
	proto.RegisterType((*BlockDeleteResponse)(nil), "api.BlockDeleteResponse")
	proto.RegisterType((*BlockReserveRequest)(nil), "api.BlockReserveRequest")
	proto.RegisterType((*BlockReserveResponse)(nil), "api.BlockReserveResponse")
	proto.RegisterType((*BlockPutRequest)(nil), "api.BlockPutRequest")
	proto.RegisterType((*BlockPutRequest_Info)(nil), "api.BlockPutRequest.Info")
	proto.RegisterType((*BlockPutRequest_Data)(nil), "api.BlockPutRequest.Data")
	proto.RegisterType((*BlockPutResponse)(nil), "api.BlockPutResponse")
	proto.RegisterType((*BlockMetadata)(nil), "api.BlockMetadata")
	proto.RegisterType((*BlockReservations)(nil), "api.BlockReservations")
	proto.RegisterMapType((map[string]*BlockReservation)(nil), "api.BlockReservations.ReservationsEntry")
	proto.RegisterType((*BlockReservation)(nil), "api.BlockReservation")
	proto.RegisterType((*BlockResponseHeader)(nil), "api.BlockResponseHeader")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockStoreClient is the client API for BlockStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockStoreClient interface {
	Get(ctx context.Context, in *BlockGetRequest, opts ...grpc.CallOption) (BlockStore_GetClient, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (BlockStore_PutClient, error)
	Reserve(ctx context.Context, in *BlockReserveRequest, opts ...grpc.CallOption) (*BlockReserveResponse, error)
	Delete(ctx context.Context, in *BlockDeleteRequest, opts ...grpc.CallOption) (*BlockDeleteResponse, error)
}

type blockStoreClient struct {
	cc *grpc.ClientConn
}

func NewBlockStoreClient(cc *grpc.ClientConn) BlockStoreClient {
	return &blockStoreClient{cc}
}

func (c *blockStoreClient) Get(ctx context.Context, in *BlockGetRequest, opts ...grpc.CallOption) (BlockStore_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockStore_serviceDesc.Streams[0], "/api.BlockStore/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStoreGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStore_GetClient interface {
	Recv() (*BlockGetResponse, error)
	grpc.ClientStream
}

type blockStoreGetClient struct {
	grpc.ClientStream
}

func (x *blockStoreGetClient) Recv() (*BlockGetResponse, error) {
	m := new(BlockGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockStoreClient) Put(ctx context.Context, opts ...grpc.CallOption) (BlockStore_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockStore_serviceDesc.Streams[1], "/api.BlockStore/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStorePutClient{stream}
	return x, nil
}

type BlockStore_PutClient interface {
	Send(*BlockPutRequest) error
	CloseAndRecv() (*BlockPutResponse, error)
	grpc.ClientStream
}

type blockStorePutClient struct {
	grpc.ClientStream
}

func (x *blockStorePutClient) Send(m *BlockPutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockStorePutClient) CloseAndRecv() (*BlockPutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BlockPutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockStoreClient) Reserve(ctx context.Context, in *BlockReserveRequest, opts ...grpc.CallOption) (*BlockReserveResponse, error) {
	out := new(BlockReserveResponse)
	err := c.cc.Invoke(ctx, "/api.BlockStore/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockStoreClient) Delete(ctx context.Context, in *BlockDeleteRequest, opts ...grpc.CallOption) (*BlockDeleteResponse, error) {
	out := new(BlockDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.BlockStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockStoreServer is the server API for BlockStore service.
type BlockStoreServer interface {
	Get(*BlockGetRequest, BlockStore_GetServer) error
	Put(BlockStore_PutServer) error
	Reserve(context.Context, *BlockReserveRequest) (*BlockReserveResponse, error)
	Delete(context.Context, *BlockDeleteRequest) (*BlockDeleteResponse, error)
}

func RegisterBlockStoreServer(s *grpc.Server, srv BlockStoreServer) {
	s.RegisterService(&_BlockStore_serviceDesc, srv)
}

func _BlockStore_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStoreServer).Get(m, &blockStoreGetServer{stream})
}

type BlockStore_GetServer interface {
	Send(*BlockGetResponse) error
	grpc.ServerStream
}

type blockStoreGetServer struct {
	grpc.ServerStream
}

func (x *blockStoreGetServer) Send(m *BlockGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockStore_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockStoreServer).Put(&blockStorePutServer{stream})
}

type BlockStore_PutServer interface {
	SendAndClose(*BlockPutResponse) error
	Recv() (*BlockPutRequest, error)
	grpc.ServerStream
}

type blockStorePutServer struct {
	grpc.ServerStream
}

func (x *blockStorePutServer) SendAndClose(m *BlockPutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockStorePutServer) Recv() (*BlockPutRequest, error) {
	m := new(BlockPutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlockStore_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStoreServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BlockStore/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStoreServer).Reserve(ctx, req.(*BlockReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BlockStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStoreServer).Delete(ctx, req.(*BlockDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.BlockStore",
	HandlerType: (*BlockStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reserve",
			Handler:    _BlockStore_Reserve_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BlockStore_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _BlockStore_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _BlockStore_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "block.proto",
}

func (m *BlockGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockGetResponse_Info_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *BlockGetResponse_Data_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *BlockGetResponse_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockGetResponse_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockGetResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockGetResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockReserveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockReserveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockReserveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockReserveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n6, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.ReservationId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ReservationId)))
		i += copy(dAtA[i:], m.ReservationId)
	}
	if len(m.MissingBlocks) > 0 {
		dAtA8 := make([]byte, len(m.MissingBlocks)*10)
		var j7 int
		for _, num1 := range m.MissingBlocks {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockPutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn9, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockPutRequest_Info_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Info.Size()))
		n10, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *BlockPutRequest_Data_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Data.Size()))
		n11, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *BlockPutRequest_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPutRequest_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReservationId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ReservationId)))
		i += copy(dAtA[i:], m.ReservationId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockPutRequest_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPutRequest_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockPutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPutResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n12, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.References != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.References))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockReservations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockReservations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reservations) > 0 {
		for k, _ := range m.Reservations {
			dAtA[i] = 0xa
			i++
			v := m.Reservations[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBlock(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBlock(uint64(len(k))) + msgSize
			i = encodeVarintBlock(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBlock(dAtA, i, uint64(v.Size()))
				n13, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n13
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockReservation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockReservation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.MissingBlocks) > 0 {
		dAtA15 := make([]byte, len(m.MissingBlocks)*10)
		var j14 int
		for _, num1 := range m.MissingBlocks {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BlockGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockGetResponse_Info_) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}
func (m *BlockGetResponse_Data_) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}
func (m *BlockGetResponse_Info) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockGetResponse_Data) Size() (n int) {
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockReserveRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockReserveResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ReservationId)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.MissingBlocks) > 0 {
		l = 0
		for _, e := range m.MissingBlocks {
			l += sovBlock(uint64(e))
		}
		n += 1 + sovBlock(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockPutRequest) Size() (n int) {
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockPutRequest_Info_) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}
func (m *BlockPutRequest_Data_) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}
func (m *BlockPutRequest_Info) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReservationId)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockPutRequest_Data) Size() (n int) {
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockPutResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockMetadata) Size() (n int) {
	var l int
	_ = l
	if m.References != 0 {
		n += 1 + sovBlock(uint64(m.References))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockReservations) Size() (n int) {
	var l int
	_ = l
	if len(m.Reservations) > 0 {
		for k, v := range m.Reservations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBlock(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockReservation) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.MissingBlocks) > 0 {
		l = 0
		for _, e := range m.MissingBlocks {
			l += sovBlock(uint64(e))
		}
		n += 1 + sovBlock(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovBlock(uint64(m.Error))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBlock(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockGetResponse_Info{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &BlockGetResponse_Info_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockGetResponse_Data{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &BlockGetResponse_Data_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockGetResponse_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockGetResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockReserveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockReserveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockReserveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockReserveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockReserveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockReserveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MissingBlocks = append(m.MissingBlocks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MissingBlocks = append(m.MissingBlocks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingBlocks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockPutRequest_Info{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &BlockPutRequest_Info_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockPutRequest_Data{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &BlockPutRequest_Data_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPutRequest_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPutRequest_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			m.References = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.References |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockReservations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockReservations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockReservations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservations == nil {
				m.Reservations = make(map[string]*BlockReservation)
			}
			var mapkey string
			var mapvalue *BlockReservation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BlockReservation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reservations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockReservation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockReservation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockReservation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MissingBlocks = append(m.MissingBlocks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MissingBlocks = append(m.MissingBlocks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingBlocks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("block.proto", fileDescriptor_block_92db6484d023d9e7) }

var fileDescriptor_block_92db6484d023d9e7 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5f, 0x6b, 0xd3, 0x50,
	0x14, 0xef, 0x6d, 0xda, 0xea, 0x4e, 0x57, 0xed, 0xae, 0x9d, 0x66, 0x11, 0x42, 0x09, 0x08, 0x11,
	0x5d, 0x3b, 0x2a, 0xc8, 0x10, 0x04, 0x29, 0x95, 0xb6, 0xe0, 0x60, 0x46, 0xf0, 0xb5, 0x64, 0xeb,
	0x69, 0x1b, 0xd6, 0x26, 0xf5, 0xde, 0xdb, 0xc1, 0xbe, 0x88, 0xf8, 0x55, 0xfc, 0x06, 0xfa, 0xe6,
	0x9b, 0xaf, 0x52, 0x3f, 0x87, 0x20, 0xb9, 0xb9, 0x6d, 0x92, 0x36, 0x3a, 0xdd, 0x5b, 0xee, 0x39,
	0xbf, 0xdf, 0xf9, 0xfb, 0xcb, 0x81, 0xf2, 0xd9, 0x34, 0x38, 0xbf, 0x68, 0xcc, 0x59, 0x20, 0x02,
	0xaa, 0xb9, 0x73, 0xcf, 0x7a, 0x0c, 0x77, 0xdb, 0xa1, 0xad, 0x8b, 0xc2, 0xc1, 0x0f, 0x0b, 0xe4,
	0x82, 0xde, 0x87, 0xd2, 0xc4, 0xe5, 0x13, 0xe4, 0x3a, 0xa9, 0x6b, 0xf6, 0xae, 0xa3, 0x5e, 0xd6,
	0x77, 0x02, 0xd5, 0x18, 0xcb, 0xe7, 0x81, 0xcf, 0x91, 0x1e, 0x41, 0xc1, 0xf3, 0x47, 0x81, 0x4e,
	0xea, 0xc4, 0x2e, 0xb7, 0x8c, 0x86, 0x3b, 0xf7, 0x1a, 0x9b, 0xa0, 0x46, 0xdf, 0x1f, 0x05, 0xbd,
	0x9c, 0x23, 0x91, 0x21, 0x63, 0xe8, 0x0a, 0x57, 0xcf, 0xff, 0x8d, 0xd1, 0x71, 0x85, 0x1b, 0x32,
	0x42, 0xa4, 0x71, 0x0c, 0x85, 0x7e, 0xc4, 0x2c, 0x4d, 0xd0, 0x1d, 0x22, 0x53, 0xd9, 0xf4, 0x98,
	0xbb, 0x22, 0xf6, 0xa4, 0xdf, 0x51, 0x38, 0xc3, 0x84, 0x42, 0x18, 0x29, 0x6c, 0x49, 0x76, 0xbe,
	0x6e, 0x29, 0x7a, 0xb5, 0x8b, 0xa0, 0xcd, 0xf8, 0xd8, 0x7a, 0x0a, 0x54, 0x46, 0xe9, 0xe0, 0x14,
	0x05, 0x5e, 0x37, 0x87, 0x2e, 0xdc, 0x4b, 0xa1, 0xd7, 0x93, 0xf8, 0xcf, 0xea, 0xac, 0x43, 0x15,
	0xc8, 0x41, 0x8e, 0xec, 0xf2, 0xda, 0xbc, 0x1f, 0x09, 0xd4, 0xd2, 0xf8, 0x9b, 0x66, 0xa6, 0x8f,
	0xe0, 0x0e, 0x93, 0x41, 0x5c, 0xe1, 0x05, 0xfe, 0xc0, 0x1b, 0xca, 0x6d, 0xec, 0x38, 0x95, 0x84,
	0xb5, 0x3f, 0x0c, 0x61, 0x33, 0x8f, 0x73, 0xcf, 0x1f, 0x0f, 0xd4, 0xf8, 0xb4, 0xba, 0x66, 0x17,
	0x9d, 0x8a, 0xb2, 0xca, 0x14, 0xdc, 0xfa, 0x4a, 0x94, 0x88, 0x4e, 0x17, 0x6b, 0x11, 0x35, 0x53,
	0xba, 0x38, 0x88, 0x2b, 0x8a, 0x31, 0x69, 0x59, 0x34, 0x53, 0xb2, 0xc8, 0x26, 0xa4, 0x54, 0x71,
	0xa8, 0x54, 0xb1, 0xdd, 0x0b, 0xc9, 0xe8, 0xe5, 0x5f, 0xa5, 0xd0, 0x51, 0x1a, 0x97, 0x59, 0x6f,
	0xbc, 0xd9, 0x26, 0x54, 0xa4, 0xfb, 0x04, 0x85, 0x1b, 0x16, 0x4b, 0x4d, 0x00, 0x86, 0x23, 0x64,
	0xe8, 0x9f, 0xcb, 0xbd, 0x12, 0xbb, 0xe8, 0x24, 0x2c, 0xd6, 0x67, 0x02, 0x7b, 0x89, 0xdd, 0xca,
	0xa2, 0x39, 0x7d, 0x03, 0xbb, 0x89, 0x26, 0xa2, 0x8a, 0xcb, 0x2d, 0x3b, 0x95, 0x7e, 0xed, 0x6d,
	0x24, 0x1f, 0xaf, 0x7d, 0xc1, 0xae, 0x9c, 0x14, 0xdb, 0x78, 0x0f, 0x7b, 0x5b, 0x10, 0x5a, 0x05,
	0xed, 0x02, 0xaf, 0xd4, 0xc8, 0xc2, 0x4f, 0xfa, 0x04, 0x8a, 0x97, 0xee, 0x74, 0x81, 0x6a, 0x13,
	0xfb, 0x99, 0xd9, 0x9c, 0x08, 0xf3, 0x22, 0x7f, 0x4c, 0xac, 0xb7, 0x6a, 0x64, 0x09, 0xf7, 0x9f,
	0x34, 0x9c, 0xa1, 0xa8, 0x7c, 0x96, 0xa2, 0x7a, 0xf1, 0x9f, 0x91, 0x18, 0x2f, 0xad, 0x41, 0x11,
	0x19, 0x0b, 0x98, 0x1a, 0x60, 0xf4, 0xa0, 0x0f, 0x61, 0x47, 0x7e, 0x0c, 0x66, 0x7c, 0xac, 0x74,
	0x7c, 0x5b, 0x1a, 0x4e, 0xf8, 0xb8, 0xf5, 0x8b, 0x00, 0xc8, 0x50, 0xef, 0x44, 0xc0, 0x90, 0x3e,
	0x07, 0xad, 0x8b, 0x82, 0xd6, 0x36, 0xae, 0x8e, 0x94, 0x97, 0xb1, 0x9f, 0x79, 0x8b, 0xac, 0xdc,
	0x11, 0x09, 0x79, 0xa7, 0x8b, 0x14, 0x2f, 0x96, 0x65, 0x92, 0x97, 0x90, 0x8d, 0x95, 0xb3, 0x09,
	0x7d, 0x05, 0xb7, 0xd4, 0xdf, 0x4a, 0xf5, 0xcd, 0x41, 0xae, 0x7e, 0x78, 0xe3, 0x20, 0xc3, 0xb3,
	0x8a, 0x41, 0x5f, 0x42, 0x29, 0x3a, 0x34, 0xf4, 0x41, 0x0c, 0x4b, 0x1d, 0x2a, 0x43, 0xdf, 0x76,
	0xac, 0xe8, 0xed, 0xea, 0x97, 0xa5, 0x49, 0xbe, 0x2d, 0x4d, 0xf2, 0x63, 0x69, 0x92, 0x4f, 0x3f,
	0xcd, 0xdc, 0x59, 0x49, 0x5e, 0xff, 0x67, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xab, 0xbc,
	0xbb, 0x0c, 0x06, 0x00, 0x00,
}
