// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: index.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IndexGetRangeRequest struct {
	Shard                string   `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64    `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexGetRangeRequest) Reset()         { *m = IndexGetRangeRequest{} }
func (m *IndexGetRangeRequest) String() string { return proto.CompactTextString(m) }
func (*IndexGetRangeRequest) ProtoMessage()    {}
func (*IndexGetRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{0}
}
func (m *IndexGetRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexGetRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexGetRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexGetRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexGetRangeRequest.Merge(dst, src)
}
func (m *IndexGetRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *IndexGetRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexGetRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexGetRangeRequest proto.InternalMessageInfo

func (m *IndexGetRangeRequest) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *IndexGetRangeRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *IndexGetRangeRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type IndexGetRangeResponse struct {
	// Types that are valid to be assigned to Msg:
	//	*IndexGetRangeResponse_Info_
	//	*IndexGetRangeResponse_Data_
	Msg                  isIndexGetRangeResponse_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *IndexGetRangeResponse) Reset()         { *m = IndexGetRangeResponse{} }
func (m *IndexGetRangeResponse) String() string { return proto.CompactTextString(m) }
func (*IndexGetRangeResponse) ProtoMessage()    {}
func (*IndexGetRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{1}
}
func (m *IndexGetRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexGetRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexGetRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexGetRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexGetRangeResponse.Merge(dst, src)
}
func (m *IndexGetRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexGetRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexGetRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexGetRangeResponse proto.InternalMessageInfo

type isIndexGetRangeResponse_Msg interface {
	isIndexGetRangeResponse_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IndexGetRangeResponse_Info_ struct {
	Info *IndexGetRangeResponse_Info `protobuf:"bytes,1,opt,name=info,oneof"`
}
type IndexGetRangeResponse_Data_ struct {
	Data *IndexGetRangeResponse_Data `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*IndexGetRangeResponse_Info_) isIndexGetRangeResponse_Msg() {}
func (*IndexGetRangeResponse_Data_) isIndexGetRangeResponse_Msg() {}

func (m *IndexGetRangeResponse) GetMsg() isIndexGetRangeResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *IndexGetRangeResponse) GetInfo() *IndexGetRangeResponse_Info {
	if x, ok := m.GetMsg().(*IndexGetRangeResponse_Info_); ok {
		return x.Info
	}
	return nil
}

func (m *IndexGetRangeResponse) GetData() *IndexGetRangeResponse_Data {
	if x, ok := m.GetMsg().(*IndexGetRangeResponse_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IndexGetRangeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IndexGetRangeResponse_OneofMarshaler, _IndexGetRangeResponse_OneofUnmarshaler, _IndexGetRangeResponse_OneofSizer, []interface{}{
		(*IndexGetRangeResponse_Info_)(nil),
		(*IndexGetRangeResponse_Data_)(nil),
	}
}

func _IndexGetRangeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IndexGetRangeResponse)
	// msg
	switch x := m.Msg.(type) {
	case *IndexGetRangeResponse_Info_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Info); err != nil {
			return err
		}
	case *IndexGetRangeResponse_Data_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IndexGetRangeResponse.Msg has unexpected type %T", x)
	}
	return nil
}

func _IndexGetRangeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IndexGetRangeResponse)
	switch tag {
	case 1: // msg.info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IndexGetRangeResponse_Info)
		err := b.DecodeMessage(msg)
		m.Msg = &IndexGetRangeResponse_Info_{msg}
		return true, err
	case 2: // msg.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IndexGetRangeResponse_Data)
		err := b.DecodeMessage(msg)
		m.Msg = &IndexGetRangeResponse_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IndexGetRangeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IndexGetRangeResponse)
	// msg
	switch x := m.Msg.(type) {
	case *IndexGetRangeResponse_Info_:
		s := proto.Size(x.Info)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IndexGetRangeResponse_Data_:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IndexGetRangeResponse_Info struct {
	Header               *IndexResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Start                int64                `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64                `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IndexGetRangeResponse_Info) Reset()         { *m = IndexGetRangeResponse_Info{} }
func (m *IndexGetRangeResponse_Info) String() string { return proto.CompactTextString(m) }
func (*IndexGetRangeResponse_Info) ProtoMessage()    {}
func (*IndexGetRangeResponse_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{1, 0}
}
func (m *IndexGetRangeResponse_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexGetRangeResponse_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexGetRangeResponse_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexGetRangeResponse_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexGetRangeResponse_Info.Merge(dst, src)
}
func (m *IndexGetRangeResponse_Info) XXX_Size() int {
	return m.Size()
}
func (m *IndexGetRangeResponse_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexGetRangeResponse_Info.DiscardUnknown(m)
}

var xxx_messageInfo_IndexGetRangeResponse_Info proto.InternalMessageInfo

func (m *IndexGetRangeResponse_Info) GetHeader() *IndexResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *IndexGetRangeResponse_Info) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *IndexGetRangeResponse_Info) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type IndexGetRangeResponse_Data struct {
	Slice                *IndexSlice `protobuf:"bytes,1,opt,name=slice" json:"slice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IndexGetRangeResponse_Data) Reset()         { *m = IndexGetRangeResponse_Data{} }
func (m *IndexGetRangeResponse_Data) String() string { return proto.CompactTextString(m) }
func (*IndexGetRangeResponse_Data) ProtoMessage()    {}
func (*IndexGetRangeResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{1, 1}
}
func (m *IndexGetRangeResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexGetRangeResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexGetRangeResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexGetRangeResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexGetRangeResponse_Data.Merge(dst, src)
}
func (m *IndexGetRangeResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *IndexGetRangeResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexGetRangeResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_IndexGetRangeResponse_Data proto.InternalMessageInfo

func (m *IndexGetRangeResponse_Data) GetSlice() *IndexSlice {
	if m != nil {
		return m.Slice
	}
	return nil
}

type IndexPutRangeRequest struct {
	// Types that are valid to be assigned to Msg:
	//	*IndexPutRangeRequest_Info_
	//	*IndexPutRangeRequest_Data_
	Msg                  isIndexPutRangeRequest_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *IndexPutRangeRequest) Reset()         { *m = IndexPutRangeRequest{} }
func (m *IndexPutRangeRequest) String() string { return proto.CompactTextString(m) }
func (*IndexPutRangeRequest) ProtoMessage()    {}
func (*IndexPutRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{2}
}
func (m *IndexPutRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexPutRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexPutRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexPutRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexPutRangeRequest.Merge(dst, src)
}
func (m *IndexPutRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *IndexPutRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexPutRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexPutRangeRequest proto.InternalMessageInfo

type isIndexPutRangeRequest_Msg interface {
	isIndexPutRangeRequest_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IndexPutRangeRequest_Info_ struct {
	Info *IndexPutRangeRequest_Info `protobuf:"bytes,1,opt,name=info,oneof"`
}
type IndexPutRangeRequest_Data_ struct {
	Data *IndexPutRangeRequest_Data `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*IndexPutRangeRequest_Info_) isIndexPutRangeRequest_Msg() {}
func (*IndexPutRangeRequest_Data_) isIndexPutRangeRequest_Msg() {}

func (m *IndexPutRangeRequest) GetMsg() isIndexPutRangeRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *IndexPutRangeRequest) GetInfo() *IndexPutRangeRequest_Info {
	if x, ok := m.GetMsg().(*IndexPutRangeRequest_Info_); ok {
		return x.Info
	}
	return nil
}

func (m *IndexPutRangeRequest) GetData() *IndexPutRangeRequest_Data {
	if x, ok := m.GetMsg().(*IndexPutRangeRequest_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IndexPutRangeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IndexPutRangeRequest_OneofMarshaler, _IndexPutRangeRequest_OneofUnmarshaler, _IndexPutRangeRequest_OneofSizer, []interface{}{
		(*IndexPutRangeRequest_Info_)(nil),
		(*IndexPutRangeRequest_Data_)(nil),
	}
}

func _IndexPutRangeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IndexPutRangeRequest)
	// msg
	switch x := m.Msg.(type) {
	case *IndexPutRangeRequest_Info_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Info); err != nil {
			return err
		}
	case *IndexPutRangeRequest_Data_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IndexPutRangeRequest.Msg has unexpected type %T", x)
	}
	return nil
}

func _IndexPutRangeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IndexPutRangeRequest)
	switch tag {
	case 1: // msg.info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IndexPutRangeRequest_Info)
		err := b.DecodeMessage(msg)
		m.Msg = &IndexPutRangeRequest_Info_{msg}
		return true, err
	case 2: // msg.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IndexPutRangeRequest_Data)
		err := b.DecodeMessage(msg)
		m.Msg = &IndexPutRangeRequest_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IndexPutRangeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IndexPutRangeRequest)
	// msg
	switch x := m.Msg.(type) {
	case *IndexPutRangeRequest_Info_:
		s := proto.Size(x.Info)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IndexPutRangeRequest_Data_:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IndexPutRangeRequest_Info struct {
	Shard                string   `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Revision             int64    `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Start                int64    `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64    `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexPutRangeRequest_Info) Reset()         { *m = IndexPutRangeRequest_Info{} }
func (m *IndexPutRangeRequest_Info) String() string { return proto.CompactTextString(m) }
func (*IndexPutRangeRequest_Info) ProtoMessage()    {}
func (*IndexPutRangeRequest_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{2, 0}
}
func (m *IndexPutRangeRequest_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexPutRangeRequest_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexPutRangeRequest_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexPutRangeRequest_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexPutRangeRequest_Info.Merge(dst, src)
}
func (m *IndexPutRangeRequest_Info) XXX_Size() int {
	return m.Size()
}
func (m *IndexPutRangeRequest_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexPutRangeRequest_Info.DiscardUnknown(m)
}

var xxx_messageInfo_IndexPutRangeRequest_Info proto.InternalMessageInfo

func (m *IndexPutRangeRequest_Info) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *IndexPutRangeRequest_Info) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *IndexPutRangeRequest_Info) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *IndexPutRangeRequest_Info) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type IndexPutRangeRequest_Data struct {
	Slice                *IndexSlice `protobuf:"bytes,1,opt,name=slice" json:"slice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IndexPutRangeRequest_Data) Reset()         { *m = IndexPutRangeRequest_Data{} }
func (m *IndexPutRangeRequest_Data) String() string { return proto.CompactTextString(m) }
func (*IndexPutRangeRequest_Data) ProtoMessage()    {}
func (*IndexPutRangeRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{2, 1}
}
func (m *IndexPutRangeRequest_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexPutRangeRequest_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexPutRangeRequest_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexPutRangeRequest_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexPutRangeRequest_Data.Merge(dst, src)
}
func (m *IndexPutRangeRequest_Data) XXX_Size() int {
	return m.Size()
}
func (m *IndexPutRangeRequest_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexPutRangeRequest_Data.DiscardUnknown(m)
}

var xxx_messageInfo_IndexPutRangeRequest_Data proto.InternalMessageInfo

func (m *IndexPutRangeRequest_Data) GetSlice() *IndexSlice {
	if m != nil {
		return m.Slice
	}
	return nil
}

type IndexPutRangeResponse struct {
	Header               *IndexResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IndexPutRangeResponse) Reset()         { *m = IndexPutRangeResponse{} }
func (m *IndexPutRangeResponse) String() string { return proto.CompactTextString(m) }
func (*IndexPutRangeResponse) ProtoMessage()    {}
func (*IndexPutRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{3}
}
func (m *IndexPutRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexPutRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexPutRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexPutRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexPutRangeResponse.Merge(dst, src)
}
func (m *IndexPutRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexPutRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexPutRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexPutRangeResponse proto.InternalMessageInfo

func (m *IndexPutRangeResponse) GetHeader() *IndexResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type IndexShard struct {
	Revision             int64                 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	SliceCounter         int64                 `protobuf:"varint,2,opt,name=slice_counter,json=sliceCounter,proto3" json:"slice_counter,omitempty"`
	Slices               []*IndexSliceLocation `protobuf:"bytes,3,rep,name=slices" json:"slices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IndexShard) Reset()         { *m = IndexShard{} }
func (m *IndexShard) String() string { return proto.CompactTextString(m) }
func (*IndexShard) ProtoMessage()    {}
func (*IndexShard) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{4}
}
func (m *IndexShard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexShard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexShard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexShard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexShard.Merge(dst, src)
}
func (m *IndexShard) XXX_Size() int {
	return m.Size()
}
func (m *IndexShard) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexShard.DiscardUnknown(m)
}

var xxx_messageInfo_IndexShard proto.InternalMessageInfo

func (m *IndexShard) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *IndexShard) GetSliceCounter() int64 {
	if m != nil {
		return m.SliceCounter
	}
	return 0
}

func (m *IndexShard) GetSlices() []*IndexSliceLocation {
	if m != nil {
		return m.Slices
	}
	return nil
}

type IndexSliceLocation struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexSliceLocation) Reset()         { *m = IndexSliceLocation{} }
func (m *IndexSliceLocation) String() string { return proto.CompactTextString(m) }
func (*IndexSliceLocation) ProtoMessage()    {}
func (*IndexSliceLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{5}
}
func (m *IndexSliceLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSliceLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexSliceLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexSliceLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSliceLocation.Merge(dst, src)
}
func (m *IndexSliceLocation) XXX_Size() int {
	return m.Size()
}
func (m *IndexSliceLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSliceLocation.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSliceLocation proto.InternalMessageInfo

func (m *IndexSliceLocation) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *IndexSliceLocation) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *IndexSliceLocation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IndexSlice struct {
	Entries              []*IndexEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IndexSlice) Reset()         { *m = IndexSlice{} }
func (m *IndexSlice) String() string { return proto.CompactTextString(m) }
func (*IndexSlice) ProtoMessage()    {}
func (*IndexSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{6}
}
func (m *IndexSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSlice.Merge(dst, src)
}
func (m *IndexSlice) XXX_Size() int {
	return m.Size()
}
func (m *IndexSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSlice.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSlice proto.InternalMessageInfo

func (m *IndexSlice) GetEntries() []*IndexEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type IndexEntry struct {
	BlockSize int64 `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// Types that are valid to be assigned to Entry:
	//	*IndexEntry_Hash
	//	*IndexEntry_Fill
	Entry                isIndexEntry_Entry `protobuf_oneof:"entry"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IndexEntry) Reset()         { *m = IndexEntry{} }
func (m *IndexEntry) String() string { return proto.CompactTextString(m) }
func (*IndexEntry) ProtoMessage()    {}
func (*IndexEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{7}
}
func (m *IndexEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexEntry.Merge(dst, src)
}
func (m *IndexEntry) XXX_Size() int {
	return m.Size()
}
func (m *IndexEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IndexEntry proto.InternalMessageInfo

type isIndexEntry_Entry interface {
	isIndexEntry_Entry()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IndexEntry_Hash struct {
	Hash *HashIndexEntry `protobuf:"bytes,2,opt,name=hash,oneof"`
}
type IndexEntry_Fill struct {
	Fill *FillIndexEntry `protobuf:"bytes,3,opt,name=fill,oneof"`
}

func (*IndexEntry_Hash) isIndexEntry_Entry() {}
func (*IndexEntry_Fill) isIndexEntry_Entry() {}

func (m *IndexEntry) GetEntry() isIndexEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *IndexEntry) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IndexEntry) GetHash() *HashIndexEntry {
	if x, ok := m.GetEntry().(*IndexEntry_Hash); ok {
		return x.Hash
	}
	return nil
}

func (m *IndexEntry) GetFill() *FillIndexEntry {
	if x, ok := m.GetEntry().(*IndexEntry_Fill); ok {
		return x.Fill
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IndexEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IndexEntry_OneofMarshaler, _IndexEntry_OneofUnmarshaler, _IndexEntry_OneofSizer, []interface{}{
		(*IndexEntry_Hash)(nil),
		(*IndexEntry_Fill)(nil),
	}
}

func _IndexEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IndexEntry)
	// entry
	switch x := m.Entry.(type) {
	case *IndexEntry_Hash:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case *IndexEntry_Fill:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fill); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IndexEntry.Entry has unexpected type %T", x)
	}
	return nil
}

func _IndexEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IndexEntry)
	switch tag {
	case 2: // entry.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashIndexEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &IndexEntry_Hash{msg}
		return true, err
	case 3: // entry.fill
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FillIndexEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &IndexEntry_Fill{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IndexEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IndexEntry)
	// entry
	switch x := m.Entry.(type) {
	case *IndexEntry_Hash:
		s := proto.Size(x.Hash)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IndexEntry_Fill:
		s := proto.Size(x.Fill)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HashIndexEntry struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashIndexEntry) Reset()         { *m = HashIndexEntry{} }
func (m *HashIndexEntry) String() string { return proto.CompactTextString(m) }
func (*HashIndexEntry) ProtoMessage()    {}
func (*HashIndexEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{8}
}
func (m *HashIndexEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashIndexEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashIndexEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HashIndexEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashIndexEntry.Merge(dst, src)
}
func (m *HashIndexEntry) XXX_Size() int {
	return m.Size()
}
func (m *HashIndexEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_HashIndexEntry.DiscardUnknown(m)
}

var xxx_messageInfo_HashIndexEntry proto.InternalMessageInfo

func (m *HashIndexEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type FillIndexEntry struct {
	Byte                 int32    `protobuf:"varint,1,opt,name=byte,proto3" json:"byte,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FillIndexEntry) Reset()         { *m = FillIndexEntry{} }
func (m *FillIndexEntry) String() string { return proto.CompactTextString(m) }
func (*FillIndexEntry) ProtoMessage()    {}
func (*FillIndexEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{9}
}
func (m *FillIndexEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FillIndexEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FillIndexEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FillIndexEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FillIndexEntry.Merge(dst, src)
}
func (m *FillIndexEntry) XXX_Size() int {
	return m.Size()
}
func (m *FillIndexEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FillIndexEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FillIndexEntry proto.InternalMessageInfo

func (m *FillIndexEntry) GetByte() int32 {
	if m != nil {
		return m.Byte
	}
	return 0
}

type IndexResponseHeader struct {
	Revision             int64    `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexResponseHeader) Reset()         { *m = IndexResponseHeader{} }
func (m *IndexResponseHeader) String() string { return proto.CompactTextString(m) }
func (*IndexResponseHeader) ProtoMessage()    {}
func (*IndexResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_37c4b4e0a2b2ca00, []int{10}
}
func (m *IndexResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IndexResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexResponseHeader.Merge(dst, src)
}
func (m *IndexResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *IndexResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_IndexResponseHeader proto.InternalMessageInfo

func (m *IndexResponseHeader) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *IndexResponseHeader) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *IndexResponseHeader) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*IndexGetRangeRequest)(nil), "api.IndexGetRangeRequest")
	proto.RegisterType((*IndexGetRangeResponse)(nil), "api.IndexGetRangeResponse")
	proto.RegisterType((*IndexGetRangeResponse_Info)(nil), "api.IndexGetRangeResponse.Info")
	proto.RegisterType((*IndexGetRangeResponse_Data)(nil), "api.IndexGetRangeResponse.Data")
	proto.RegisterType((*IndexPutRangeRequest)(nil), "api.IndexPutRangeRequest")
	proto.RegisterType((*IndexPutRangeRequest_Info)(nil), "api.IndexPutRangeRequest.Info")
	proto.RegisterType((*IndexPutRangeRequest_Data)(nil), "api.IndexPutRangeRequest.Data")
	proto.RegisterType((*IndexPutRangeResponse)(nil), "api.IndexPutRangeResponse")
	proto.RegisterType((*IndexShard)(nil), "api.IndexShard")
	proto.RegisterType((*IndexSliceLocation)(nil), "api.IndexSliceLocation")
	proto.RegisterType((*IndexSlice)(nil), "api.IndexSlice")
	proto.RegisterType((*IndexEntry)(nil), "api.IndexEntry")
	proto.RegisterType((*HashIndexEntry)(nil), "api.HashIndexEntry")
	proto.RegisterType((*FillIndexEntry)(nil), "api.FillIndexEntry")
	proto.RegisterType((*IndexResponseHeader)(nil), "api.IndexResponseHeader")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexStoreClient is the client API for IndexStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexStoreClient interface {
	GetRange(ctx context.Context, in *IndexGetRangeRequest, opts ...grpc.CallOption) (IndexStore_GetRangeClient, error)
	PutRange(ctx context.Context, opts ...grpc.CallOption) (IndexStore_PutRangeClient, error)
}

type indexStoreClient struct {
	cc *grpc.ClientConn
}

func NewIndexStoreClient(cc *grpc.ClientConn) IndexStoreClient {
	return &indexStoreClient{cc}
}

func (c *indexStoreClient) GetRange(ctx context.Context, in *IndexGetRangeRequest, opts ...grpc.CallOption) (IndexStore_GetRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IndexStore_serviceDesc.Streams[0], "/api.IndexStore/GetRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexStoreGetRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexStore_GetRangeClient interface {
	Recv() (*IndexGetRangeResponse, error)
	grpc.ClientStream
}

type indexStoreGetRangeClient struct {
	grpc.ClientStream
}

func (x *indexStoreGetRangeClient) Recv() (*IndexGetRangeResponse, error) {
	m := new(IndexGetRangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indexStoreClient) PutRange(ctx context.Context, opts ...grpc.CallOption) (IndexStore_PutRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IndexStore_serviceDesc.Streams[1], "/api.IndexStore/PutRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexStorePutRangeClient{stream}
	return x, nil
}

type IndexStore_PutRangeClient interface {
	Send(*IndexPutRangeRequest) error
	CloseAndRecv() (*IndexPutRangeResponse, error)
	grpc.ClientStream
}

type indexStorePutRangeClient struct {
	grpc.ClientStream
}

func (x *indexStorePutRangeClient) Send(m *IndexPutRangeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *indexStorePutRangeClient) CloseAndRecv() (*IndexPutRangeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IndexPutRangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexStoreServer is the server API for IndexStore service.
type IndexStoreServer interface {
	GetRange(*IndexGetRangeRequest, IndexStore_GetRangeServer) error
	PutRange(IndexStore_PutRangeServer) error
}

func RegisterIndexStoreServer(s *grpc.Server, srv IndexStoreServer) {
	s.RegisterService(&_IndexStore_serviceDesc, srv)
}

func _IndexStore_GetRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndexGetRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexStoreServer).GetRange(m, &indexStoreGetRangeServer{stream})
}

type IndexStore_GetRangeServer interface {
	Send(*IndexGetRangeResponse) error
	grpc.ServerStream
}

type indexStoreGetRangeServer struct {
	grpc.ServerStream
}

func (x *indexStoreGetRangeServer) Send(m *IndexGetRangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IndexStore_PutRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndexStoreServer).PutRange(&indexStorePutRangeServer{stream})
}

type IndexStore_PutRangeServer interface {
	SendAndClose(*IndexPutRangeResponse) error
	Recv() (*IndexPutRangeRequest, error)
	grpc.ServerStream
}

type indexStorePutRangeServer struct {
	grpc.ServerStream
}

func (x *indexStorePutRangeServer) SendAndClose(m *IndexPutRangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *indexStorePutRangeServer) Recv() (*IndexPutRangeRequest, error) {
	m := new(IndexPutRangeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IndexStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.IndexStore",
	HandlerType: (*IndexStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRange",
			Handler:       _IndexStore_GetRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutRange",
			Handler:       _IndexStore_PutRange_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "index.proto",
}

func (m *IndexGetRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexGetRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shard) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Shard)))
		i += copy(dAtA[i:], m.Shard)
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexGetRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexGetRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexGetRangeResponse_Info_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *IndexGetRangeResponse_Data_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *IndexGetRangeResponse_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexGetRangeResponse_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexGetRangeResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexGetRangeResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slice != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Slice.Size()))
		n5, err := m.Slice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexPutRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexPutRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn6, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexPutRangeRequest_Info_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Info.Size()))
		n7, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *IndexPutRangeRequest_Data_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *IndexPutRangeRequest_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexPutRangeRequest_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shard) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Shard)))
		i += copy(dAtA[i:], m.Shard)
	}
	if m.Revision != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Revision))
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexPutRangeRequest_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexPutRangeRequest_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slice != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Slice.Size()))
		n9, err := m.Slice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexPutRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexPutRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Header.Size()))
		n10, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexShard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexShard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Revision != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Revision))
	}
	if m.SliceCounter != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.SliceCounter))
	}
	if len(m.Slices) > 0 {
		for _, msg := range m.Slices {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexSliceLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSliceLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.End))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockSize))
	}
	if m.Entry != nil {
		nn11, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexEntry_Hash) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Hash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Hash.Size()))
		n12, err := m.Hash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *IndexEntry_Fill) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fill != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Fill.Size()))
		n13, err := m.Fill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *HashIndexEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashIndexEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FillIndexEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FillIndexEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Byte != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Byte))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Revision != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Revision))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IndexGetRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovIndex(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovIndex(uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexGetRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexGetRangeResponse_Info_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}
func (m *IndexGetRangeResponse_Data_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}
func (m *IndexGetRangeResponse_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovIndex(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovIndex(uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexGetRangeResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slice != nil {
		l = m.Slice.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexPutRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexPutRangeRequest_Info_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}
func (m *IndexPutRangeRequest_Data_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}
func (m *IndexPutRangeRequest_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovIndex(uint64(m.Revision))
	}
	if m.Start != 0 {
		n += 1 + sovIndex(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovIndex(uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexPutRangeRequest_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slice != nil {
		l = m.Slice.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexPutRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexShard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != 0 {
		n += 1 + sovIndex(uint64(m.Revision))
	}
	if m.SliceCounter != 0 {
		n += 1 + sovIndex(uint64(m.SliceCounter))
	}
	if len(m.Slices) > 0 {
		for _, e := range m.Slices {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexSliceLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovIndex(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovIndex(uint64(m.End))
	}
	if m.Id != 0 {
		n += 1 + sovIndex(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockSize != 0 {
		n += 1 + sovIndex(uint64(m.BlockSize))
	}
	if m.Entry != nil {
		n += m.Entry.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexEntry_Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}
func (m *IndexEntry_Fill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fill != nil {
		l = m.Fill.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}
func (m *HashIndexEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FillIndexEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Byte != 0 {
		n += 1 + sovIndex(uint64(m.Byte))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexResponseHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != 0 {
		n += 1 + sovIndex(uint64(m.Revision))
	}
	if m.Error != 0 {
		n += 1 + sovIndex(uint64(m.Error))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexGetRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexGetRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexGetRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexGetRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexGetRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexGetRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IndexGetRangeResponse_Info{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &IndexGetRangeResponse_Info_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IndexGetRangeResponse_Data{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &IndexGetRangeResponse_Data_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexGetRangeResponse_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &IndexResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexGetRangeResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slice == nil {
				m.Slice = &IndexSlice{}
			}
			if err := m.Slice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexPutRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexPutRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexPutRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IndexPutRangeRequest_Info{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &IndexPutRangeRequest_Info_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IndexPutRangeRequest_Data{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &IndexPutRangeRequest_Data_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexPutRangeRequest_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexPutRangeRequest_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slice == nil {
				m.Slice = &IndexSlice{}
			}
			if err := m.Slice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexPutRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexPutRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexPutRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &IndexResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexShard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceCounter", wireType)
			}
			m.SliceCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SliceCounter |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slices = append(m.Slices, &IndexSliceLocation{})
			if err := m.Slices[len(m.Slices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSliceLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSliceLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSliceLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &IndexEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashIndexEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &IndexEntry_Hash{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FillIndexEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &IndexEntry_Fill{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashIndexEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashIndexEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashIndexEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FillIndexEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FillIndexEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FillIndexEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byte", wireType)
			}
			m.Byte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Byte |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("index.proto", fileDescriptor_index_37c4b4e0a2b2ca00) }

var fileDescriptor_index_37c4b4e0a2b2ca00 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xae, 0x93, 0x66, 0x5b, 0x6f, 0x63, 0x4c, 0xde, 0x10, 0xa1, 0x88, 0x32, 0x05, 0x90, 0xca,
	0x03, 0x65, 0x1a, 0x43, 0xbc, 0x0f, 0x06, 0x9b, 0x34, 0x24, 0xe4, 0xf2, 0x5e, 0xdc, 0xc6, 0x6d,
	0x2d, 0xb2, 0xb8, 0xc4, 0x2e, 0xa2, 0x7b, 0xe0, 0x07, 0xf0, 0x0b, 0xd0, 0x24, 0xfe, 0x0f, 0x8f,
	0xfc, 0x04, 0x54, 0xfe, 0x08, 0xb2, 0xe3, 0x2c, 0x4d, 0x16, 0x2a, 0x10, 0x6f, 0xbe, 0xf3, 0x77,
	0xdf, 0xdd, 0x7d, 0x77, 0x36, 0xac, 0xf3, 0x38, 0x64, 0x9f, 0x3a, 0x93, 0x44, 0x28, 0x81, 0x5d,
	0x3a, 0xe1, 0xc1, 0x5b, 0xd8, 0x39, 0xd1, 0xbe, 0x57, 0x4c, 0x11, 0x1a, 0x8f, 0x18, 0x61, 0x1f,
	0xa6, 0x4c, 0x2a, 0xbc, 0x03, 0x9e, 0x1c, 0xd3, 0x24, 0xf4, 0xd1, 0x2e, 0x6a, 0x37, 0x48, 0x6a,
	0x18, 0xaf, 0xa2, 0x89, 0xf2, 0x9d, 0x5d, 0xd4, 0x76, 0x49, 0x6a, 0xe0, 0x2d, 0x70, 0x59, 0x1c,
	0xfa, 0xae, 0xf1, 0xe9, 0x63, 0xf0, 0xcd, 0x81, 0x1b, 0x25, 0x5a, 0x39, 0x11, 0xb1, 0x64, 0xf8,
	0x29, 0xd4, 0x79, 0x3c, 0x14, 0x86, 0x76, 0x7d, 0xff, 0x6e, 0x87, 0x4e, 0x78, 0xa7, 0x12, 0xd9,
	0x39, 0x89, 0x87, 0xe2, 0xb8, 0x46, 0x0c, 0x5c, 0x87, 0x85, 0x54, 0x51, 0x93, 0x77, 0x79, 0xd8,
	0x0b, 0xaa, 0xa8, 0x0e, 0xd3, 0xf0, 0xe6, 0x3b, 0xa8, 0x6b, 0x1a, 0xbc, 0x07, 0x2b, 0x63, 0x46,
	0x43, 0x96, 0xd8, 0xbc, 0x7e, 0x4e, 0x90, 0x05, 0x1e, 0x9b, 0x7b, 0x62, 0x71, 0x7f, 0xdb, 0x69,
	0xf3, 0x11, 0xd4, 0x75, 0x46, 0xfc, 0x00, 0x3c, 0x19, 0xf1, 0x01, 0xb3, 0x09, 0xae, 0xe7, 0x09,
	0xba, 0xda, 0x4d, 0xd2, 0xdb, 0x43, 0x0f, 0xdc, 0x33, 0x39, 0x0a, 0x2e, 0x1c, 0x2b, 0xfb, 0x9b,
	0x69, 0x51, 0xf6, 0x83, 0x82, 0x3c, 0xad, 0x9c, 0xa5, 0x04, 0x2c, 0xaa, 0x73, 0x50, 0x50, 0x67,
	0x49, 0x54, 0xa5, 0x38, 0xd5, 0xa3, 0x6e, 0xc2, 0x5a, 0xc2, 0x3e, 0x72, 0xc9, 0x45, 0x6c, 0x35,
	0xb8, 0xb4, 0x73, 0x71, 0xdc, 0x0a, 0x71, 0xea, 0xff, 0x2b, 0xce, 0x89, 0xdd, 0x9d, 0xbc, 0x78,
	0xbb, 0x3b, 0xff, 0x3c, 0xc5, 0xe0, 0x33, 0x40, 0x9a, 0xe6, 0x4a, 0x4b, 0xa8, 0xd4, 0xd2, 0x3d,
	0xb8, 0x66, 0x8a, 0xe8, 0x0d, 0xc4, 0x34, 0x56, 0x2c, 0xb1, 0x3d, 0x6f, 0x18, 0xe7, 0xf3, 0xd4,
	0x87, 0x1f, 0xc3, 0x8a, 0xb1, 0xa5, 0xef, 0xee, 0xba, 0xed, 0xf5, 0xfd, 0x9b, 0xa5, 0x46, 0x4e,
	0xc5, 0x80, 0x2a, 0x2e, 0x62, 0x62, 0x61, 0xc1, 0x29, 0xe0, 0xab, 0xb7, 0xb9, 0x7c, 0xa8, 0x42,
	0x3e, 0xe7, 0x52, 0x3e, 0xbc, 0x09, 0x0e, 0xcf, 0x96, 0xcd, 0xe1, 0x61, 0xf0, 0x2c, 0xeb, 0x46,
	0xb3, 0xe1, 0x87, 0xb0, 0xca, 0x62, 0x95, 0x70, 0x26, 0x7d, 0x64, 0xaa, 0x59, 0x90, 0xf5, 0x28,
	0x56, 0xc9, 0x8c, 0x64, 0xf7, 0xc1, 0x17, 0x64, 0x23, 0x8d, 0x1f, 0xdf, 0x01, 0xe8, 0x47, 0x62,
	0xf0, 0xbe, 0x27, 0xf9, 0x39, 0xb3, 0x45, 0x34, 0x8c, 0xa7, 0xcb, 0xcf, 0x35, 0x71, 0x7d, 0x4c,
	0xe5, 0xd8, 0x6e, 0xd3, 0xb6, 0x61, 0x3d, 0xa6, 0x72, 0x9c, 0x33, 0xe8, 0x15, 0xd2, 0x10, 0x0d,
	0x1d, 0xf2, 0x28, 0x32, 0x35, 0x66, 0xd0, 0x97, 0x3c, 0x8a, 0x8a, 0x50, 0x0d, 0x39, 0x5c, 0x05,
	0x4f, 0x97, 0x33, 0x0b, 0xee, 0xc3, 0x66, 0x91, 0x0d, 0x63, 0x9b, 0x50, 0x57, 0xb2, 0x91, 0x32,
	0x6b, 0x54, 0x91, 0x48, 0xa3, 0xfa, 0x33, 0x95, 0xd6, 0xeb, 0x11, 0x73, 0x0e, 0x42, 0xd8, 0xae,
	0x18, 0xff, 0xd2, 0x41, 0xef, 0x80, 0xc7, 0x92, 0x44, 0xa4, 0x03, 0xf6, 0x48, 0x6a, 0xe0, 0xdb,
	0xd0, 0x30, 0x87, 0xde, 0x99, 0x1c, 0x99, 0x6e, 0x1a, 0x64, 0xcd, 0x38, 0x5e, 0xcb, 0xd1, 0xfe,
	0x45, 0x26, 0x5f, 0x57, 0x89, 0x84, 0xe1, 0x23, 0x58, 0xcb, 0x7e, 0x1d, 0x7c, 0xab, 0xea, 0x27,
	0x32, 0x6f, 0xad, 0xd9, 0xfc, 0xf3, 0x27, 0x15, 0xd4, 0xf6, 0x90, 0xa6, 0xc9, 0x36, 0x7c, 0x91,
	0xa6, 0xf4, 0x64, 0x17, 0x69, 0xca, 0x0f, 0x22, 0xa8, 0xb5, 0xd1, 0xe1, 0xd6, 0xf7, 0x79, 0x0b,
	0xfd, 0x98, 0xb7, 0xd0, 0xcf, 0x79, 0x0b, 0x7d, 0xfd, 0xd5, 0xaa, 0xf5, 0x57, 0xcc, 0xf7, 0xfe,
	0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x93, 0x59, 0x5d, 0xed, 0x05, 0x00, 0x00,
}
